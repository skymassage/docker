docker network create goals-net
docker build -t goals-react ./frontend
docker run --name goals-frontend --rm -p 3000:3000 -it goals-react
# docker build -t goals-node ./backend
# docker run --name goals-backend --rm -d --network goals-net -p 80:80  goals-node
docker run --name mongodb -v data:/data/db --rm -d -e MONGO_INITDB_ROOT_USERNAME=alice -e MONGO_INITDB_ROOT_PASSWORD=hello --network goals-net mongo
----------------------------------------------------------------------

When we start the container, we will "run app.js" with the node command. And that basically logs in the code at the point of time this containers starts. We can say the node process loads all the code, and then starts that code.
So, if the code changes their author, this has no impact on the already running node server.
That's of course not what we want here. We want the node server to restart whenever the code changes.
Yes, we could stop and restart the container, that would do the trick, but even better than that, we can add the extra dependency to this project, which then actually will restart the server automatically for us when the code changes.
For this, I'll delete package log JSON. 
In packaged.js, I'll add '"devDependencies":{"nodemon": "^2.0.4"}', where "nodemon" is an extra tool which watches the project folder for file changes in JavaScript files, and if such a JavaScript file does change, it restarts the node server. So we can restarts the node server and watch for file changes without manually restarting the container.
And add '"start": "nodemon app.js"' into "scripts" in /backend/package.json to use nodemon to run app.js.
In the Dockerfile of the backend project, we now need to run "npm start" to utilize nodemon.

----------------------------------------------------------------------
Build the backend image and create its container with volumes and bind mount:
	docker build -t goals-node ./backend
	docker run --name goals-backend -v $(pwd)/backend:/app -v logs:/app/logs -v /app/node_modules --rm -d --network goals-net -p 80:80 goals-node
We want that when the source code in the local host project folder changes, the corresponding code in the container also changes.
We want to view the logs and Node writes the logs to "/app/logs" inside of the container.
Note that if we don't have the "node_modules" folder on the local host, we couldn't overwrite the existing "node_modules" in the container with the non-existing one here, which would cause our container to crash.
Note that longer container internal paths have precedents and overwrite shorter paths. 

Now the app uses nodemon internally, and we can change our code and verify this change by running:
	docker logs goals-backend

There are some files we don't want to copy into the container (like node_modules, Dockerfile, .git), so we can add a .dockerignore file including these files.



