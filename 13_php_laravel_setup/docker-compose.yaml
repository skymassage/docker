version: "3.8"

services:
    # The nginx server container will take all the incoming requests to the PHP interpreter container,
    # and let that container execute the PHP code.
    server:
        build:
            context: .
            dockerfile: dockerfiles/nginx.dockerfile
        
        # The nginx official image documentation (https://hub.docker.com/_/nginx)
        # tells that we can expose this port 80 which is exposed internally by that image.
        ports: 
            - '8000:80'

        volumes:
            # We need to provide the "nginx.conf" file on the host, which contains some nginx configuration, and we bind it to the container.
            # In the container, we bind it to the file at "/etc/nginx/conf.d/default.conf" according to the official image documentation.
            # Note that ":ro" here is read-only because the container should never change that configuration.
            # You can go to "nginx.conf" and chcek it.
            - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro

            # The server is our main entry point which will serve the app and which will forward requests to the PHP interpreter,
            # and the PHP interpreter will talk indirectly to the MySQL database because in our code we will connect to that.
            # Therefore, the incoming request first arrive at our server container,
            # which only forwards requests for PHP files to the PHP container,
            # so these PHP files (source code) need to be exposed to the server container with bind mount.
            # We bind "./src" to "var/www/html" because "var/www/html" is set in "nginx/nginx.conf" and we serve our content from there.
            - ./src:/var/www/html
        
        # The nginx server service really only works,
        # if it can communicate with the php service and if that php service can communicate with the mysql service.
        depends_on: 
            - php
            - mysql
    
    # The PHP container is responsible for running and executing the PHP code and the Laravel code, where Laravel is a PHP framework.
    php:
        # Build a custom image, because we don't just want PHP and we want to install some extra extensions which Laravel needs.
        build:
            context: ./dockerfiles
            dockerfile: php.dockerfile

        volumes:
            # We must ensure this PHP interpreter can reach our source code which needs to be available in "/var/www/html"
            # inside of the container, so we bind our source code folder "src" to "/var/www/html" inside of the container.
            # ":delegated" means that if the containers should write some data there,
            # it's not instantly reflected back to the host machine, instead it is basically processed in batches.
            # So performance is a bit better since this container shouldn't write frequently to the local folder,
            # because it won't write anything which we need to access instantly on the host machine.
            - ./src:/var/www/html:delegated

        # Here we don't need to expose the local host port to this container port,
        # because the local host has nothing to do with the direct communication between the server (nginx) container and the php container.
        # So communication via ports shouldn't be defined in our php service in this docker-compose.yaml file,
        # but instead should be defined in "nginx/nginx.conf". 

    # The MySQL container holds the MySQL database, which be accessed by our PHP code living in the php container
    mysql:
        image: 'mysql:5.7'

        # See the mysql offical image how to set the environment variables in "/env/mysql.env".
        env_file: 
            - ./env/mysql.env
    
    # Three utility containers: composer, artisan, npm   
    # Composer is a tool for dependency management in PHP, and Laravel utilizes it to manage its dependencies.
    composer:
        build:
            context: ./dockerfiles
            dockerfile: composer.dockerfile
        volumes: 
            # Ensure this container works on our source code directory, and the Laravel app is created in "/var/www/html".
            - ./src:/var/www/html
    
    # Use the Artisan tool to run certain Laravel commands, such as populating the database with some initial data.
    artisan:
        # Artisan is a Laravel command built with PHP, so it needs PHP to execute code. 
        # And here we simply use the php.dockerfile because we just need the same setup as there.
        build:
            context: .
            dockerfile: dockerfiles/php.dockerfile
        volumes: 
            # It is executed on our source code, and "/var/www/html" is our app will reside.
            - ./src:/var/www/html

        # We can also add the docker instruction in the docker compose file,
        # like here adding the entry point to this image since it doesn't exist in php.dockerfile,
        # It allows us to overwrite the entry point in php.dockerfile and we don't create an extra dockerfile.
        # We don't want to add the entry point in php.dockerfile,
        # because the PHP container is used by nginx to funnel individual files through it,
        # and it's used like a utility container for nginx.
        entrypoint: ["php", "/var/www/html/artisan"]

    npm:
        image: node:14
        # We can add the docker instrucitons to add the working directory and the entry point,
        # but it's more convenient to set them here without an extra dockerfile.
        # For more complex instructions like "COPY" and "RUN", they are not available in a docker compose file,
        # so it's really only for basic images.
        working_dir: /var/www/html
        entrypoint: ["npm"]
        volumes:
            # Same logic as for artisan.
            - ./src:/var/www/html