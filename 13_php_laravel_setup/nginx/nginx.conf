server {
    # "listen" on port 80, and we can change this if we want to listen on a different port    of the container.
    listen 80;
    
    # "index" defines files that will be used as an index.
    index index.php index.html;
    
    # "server_name" determines which server block is used for a given request.
    # Server block defines a virtual server used to handle requests of a defined type.
    server_name localhost;
    
    # It ensures that in this directory we look for files which we can use to respond to the incoming request.
    root /var/www/html/public;
    
    # It ensure that all incoming requests are redirected to the "index.php" files.
    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    # Requests already targeting the .php files will be forwarded to the PHP interpreter.
    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        
        # We're sending requests or PHP requests to the port 3000, and here is from an IP address to the port 3000.
        # All the containers created in one docker compose file are part of the same network and can discover each other by name,
        # so here we can refer to the container (service) name "php". 
        # We basically want to send our request to handle some PHP file to port 3000.
        # fastcgi_pass php:3000;
        
        # The nginx server container wants to talk to the php container, so that's why we're referencing it by name here.
        # If that's the case, port 3000 is going straight to the container and it's not going to be sent from our local host machine.
        fastcgi_pass php:9000;

        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }
}