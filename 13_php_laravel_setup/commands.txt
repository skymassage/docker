Bring up the compose container with the Composer command "composer create-project --prefer-dist laravel/laravel <path>" to set up a Laravel project:
	docker compose run --rm composer create-project --prefer-dist laravel/laravel .
Note that we don't add "compose" here again because since our entry point in "composer.dockerfile" has used "compose".
At the end we need to specify the folder path in which it should be created, it's the working directory "/var/www/html",
so just use '.'. And this will be reflected in "./src" on local host because of bind mount,
so we will see our Laravel app created there.
And we can start writing Laravel code.
See "src/.env" generated by Laravel to check some configuration Laravel.

Bring up the server, php and mysql services:
    docker compose up -d --build server
If the server service is brought up, the services that the server service (php, mysql) depends on will also be brought up automatically,
because we have set "depends_on" in the docker compose file.
"--build" re-evaluates the images and rebuilds them if the layers of the images change th ensure that we always use the latest image.

Create the artisan container with the Artisan command "artisan migrate" to migrate the database:
	docker compose run --rm artisan migrate
"artisan migrate" is one of the artisan command's Laravel supports,
and it will write some data to the database and it also check whether this database set up works.
Note that we don't use "artisan"twice because we've set the entry point.

