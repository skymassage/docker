# ".yaml" is just a specific text format where you use "indentation" to express dependencies between configuration options.
# We can put your container configuration into the yaml file without executing a lot of Docker commands,
# and use just one command ("docker compose up") to execute this file to replace the Docker commands.
# So this file do the same thing as the commands inside of "docker-commands.txt",
# and we can use "docker-commands.txt" to check this yaml file.

# Refer to the cheat sheet to see how to use the Docker Compose commands.

# See Lecture 96 to install Docker Compose on Linux.

version: "3.8"

 # "services" are in the end the Containers that your app needs
services: 
    # Containers are the child elements of "services", and we can label these containers with whatever name we want
    # so here we name three containers "mongodb", "backend", "frontend".
    mongodb:
        # Here can be just the image name which will be looked up locally and in the Docker hub repository,
        # or it could be a full URL to another repository.
        image: "mongo"

        # Define any required volumes or bind mounts.
        volumes:
            - data:/data/db

        # For single values, we need dashes without colons and a wide spaces.
        # For key-value pairs, we don't need dashes but colons and wide spaces.
        environment:
            # Environment variables are key-value pairs, usually we don't use dashes but colons and wide spaces.
            MONGO_INITDB_ROOT_USERNAME: alice
            MONGO_INITDB_ROOT_PASSWORD: hello
            # Or we also can use dashes without colons and a wide spaces to set them like single values.
            # Note that we could use two methods to set them at the same time.
            # - MONGO_INITDB_ROOT_USERNAME=alice
            # - MONGO_INITDB_ROOT_PASSWORD=hello
        # Here we might want to move sensitive environment variables (like passwords) out of that file,
        # and put them in a separate file that we can exclude from git so it doesn't get pushed to GitHub.
        # env_file: 
        #     - ./env/mongo.env

        # When using Docker Compose, Docker will automatically create a default network for all our containers, 
        # so we don't need to specify our own network unless we need multiple Networks.
        # networks:
        #     - goals-net

        # We don't need to add "--rm" and "-d". In Docker Compose default,
        # the containers will be removed when the services is turned off,
        # and we can specify the detached mode in the Docker Compose command.

    backend:
        # Instead of specifying a finished image, we can also give Docker Compose all the information it needs to build a image.
        # If the image already exists, it doesn't always rebuild the image, it uses the existing image again.
        # It will only be rebuild if the image has changed
        # For example, if we changed our code and it detects that rebuilding is required.
        # In the simplest form,  we can just use a relative path here.
        build: ./backend
        
        # # Or we can also use the longer form, which you have nested keys below "build".
        # build:
        #     # "context" key specifies the path to the folder that holds our Dockerfile.
        #     context: ./backend
            
        #     # "dockerfile" key specifies the docker file name.
        #     # Our docker file is named "Dockerfile", so there is no need to use this longer form. 
        #     # But if you named it differently, for example, "Dockerfile-dev" (each docker file name should start with "Dockerfile"),
        #     # then this is how you could tell Docker Compose which docker file to use.
        #     dockerfile: Dockerfile

        #     # Specify the build arguments if using "ARG" in our Dokcerfile.
        #     args:
        #         some-arg: 1

        # If our app would use and expose multiple ports, we can also specify multiple ports hereã„¡
        ports:
            - "80:80"
        
        volumes: 
            - logs:/app/logs
            # For volumes, here we can use "." instead of "$(pwd)" as the relative path of this yaml file.
            - ./backend:/app
            - /app/node_modules
        
        env_file: 
            - ./env/backend.env
        
        # Sometimes, one container might depend on another container to be up and running already.
        # Here, the "backend" container actually depends on the "mongodb" container being up and running already 
        # because "backend" wants to connect to MongoDB.
        # Therefore, we should express a dependency to let Docker Compose know that it should first bring up "mongodb",
        # and once "mongodb" is up and running, it should create this "backend" container.
        depends_on:
            # Specifies the name of the service on which this service depends.
            # In addition, a service can also depend on multiple services.
            - mongodb

        # The name of the image, container, volumes created by Docker Compose are 11_compose-backend, 11_compose-frontend,
        # 11_compose-mongodb-1, 11_compose-backend-1, 11_compose-frontend-1, 11_compose_data, 11_compose_logs,
        # they're not the names we call in this file.
        # And they actually combine the projector folder name with the names set in the compose file.

        # However, these names (mongodb, backend, frontend) are just the service names, not actually container names.
        # But they are memorized by Docker, so we can use these names inside our code to establish network connections.
        # For example, we can still connect to "mongodb" by that name in "backend/app.js"
        # even though the name assigned by Docker Compose is "11_compose-mongodb-1",
        # because we used "mongodb" as a service name here.
        # So these service names are the names we can use in our code to send requests
        # and to leverage the network Docker Compose creates for you.

        # We can still manually set the name to the container in the compose file.
        # Here we can set this container name to "goals-backend", so it won't be set as "11_compose-backend".
        # container_name: goals-backend

    frontend:
        build: ./frontend
        ports: 
            - "3000:3000"
        volumes: 
            - ./frontend/src:/app/src
        
        # "stdin_open" configures a service's container to run with an allocated stdin.
        # This is the same as running a container with the "-i" flag
        stdin_open: true
        
        # "tty" configures a service's container to run with a TTY.
        # This is the same as running a container with the "-t" or "--tty" flag
        tty: true
        
        depends_on: 
            - backend

# For named volumes,  you should also add a "volumes" key next to "services" so not indented
# instead on the same level as "services". And anonymous volumes and bind mounts don't need to specified here.
# Note that if you use the same volume name in different services, the volume will be shared in the different containers,
# i.e., the different containers share the same folder on your hosting machine.
volumes:
    # Here we names the volume in "mongodb" as "data" and the volume in "backend" as "logs".
    # We simply add like this with a colon and then no value thereafter.
    # This may seem strange, but it's a syntax that Docker can understand.
    data:
    logs: